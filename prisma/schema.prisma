generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model User {
  userId                 String               @id @default(uuid())
  email                  String               @unique
  firstName              String               @unique
  lastName               String
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  hasCompletedOnboarding Boolean              @default(false)
  aiAnalysisReports      AIAnalysisReport[]
  Subscriptions          LsUserSubscription[]
  projectProgresses      ProjectProgress[]
  quizAttempts           QuizAttempt[]
  onboarding             UserOnboarding?
  progress               UserProgress[]
}

model UserOnboarding {
  id             String    @id @default(uuid())
  userId         String    @unique
  experience     String
  platforms      String[]
  certifications String[]
  role           String    @default("OTHER")
  focusArea      String[]
  completedAt    DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  user           User      @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model Quiz {
  id           String           @id @default(uuid())
  title        String
  description  String?
  isPublic     Boolean          @default(false)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  categoryId   String?
  duration     Int?
  free         Boolean?
  level        DifficultyLevel? @default(BEGINER)
  thumbnail    String?
  isNew        Boolean          @default(true)
  questions    Question[]
  category     Category?        @relation(fields: [categoryId], references: [id])
  attempts     QuizAttempt[]
  userProgress UserProgress[]
}

model Question {
  id              String            @id @default(uuid())
  quizId          String
  isMultiSelect   Boolean           @default(false)
  correctAnswer   String[]
  explanation     String?
  createdAt       DateTime          @default(now())
  categoryId      String?
  difficultyLevel String?
  awsService      String?
  content         String
  category        Category?         @relation(fields: [categoryId], references: [id])
  quiz            Quiz              @relation(fields: [quizId], references: [id], onDelete: Cascade)
  attempts        QuestionAttempt[]
  options         QuestionOption[]
}

model Flashcard {
  id         String    @id @default(uuid())
  topic      String
  question   String
  answer     String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])
}

model UserProgress {
  id          String    @id @default(uuid())
  userId      String
  quizId      String
  score       Int
  completedAt DateTime?
  timeTaken   Int?
  attempts    Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  quiz        Quiz      @relation(fields: [quizId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model LsSubscriptionPlan {
  id                 String               @id @default(cuid())
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  productId          Int
  productName        String
  name               String
  description        String?
  features           String[]
  individual         Boolean              @default(false)
  team               Boolean              @default(false)
  variantId          Int                  @unique
  variantType        VariantType?         @default(MONTHS)
  price              String
  isUsageBased       Boolean              @default(false)
  interval           String?
  intervalCount      Int?
  trialInterval      String?
  trialIntervalCount Int?
  Subscriptions      LsUserSubscription[]
}

model LsUserSubscription {
  id                     String             @id @default(cuid())
  createdAt              DateTime           @default(now())
  updatedAt              DateTime           @updatedAt
  lemonSqueezyId         String             @unique
  userId                 String
  planId                 String
  name                   String?
  email                  String?
  orderId                Int
  subscriptionItemId     String
  status                 String
  statusFormatted        String
  renewsAt               String
  endsAt                 String?
  trialEndsAt            String?
  price                  String
  isPaused               Boolean            @default(false)
  isUsageBased           Boolean
  billingPortalUrl       String?
  updatePaymentMethodUrl String?
  subscriptionPlan       LsSubscriptionPlan @relation(fields: [planId], references: [id])
  user                   User               @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model LsWebhookEvent {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now())
  eventName       String
  processed       Boolean  @default(false)
  body            Json
  processingError String?
}

model Category {
  id          String        @id @default(uuid())
  name        String        @unique
  description String?
  flashcards  Flashcard[]
  projects    Project[]
  questions   Question[]
  quizzes     Quiz[]
  quizAttempt QuizAttempt[]
}

model QuizAttempt {
  id              String            @id @default(uuid())
  userId          String
  quizId          String
  totalScore      Int
  percentageScore Float
  timeSpentSecs   Int
  startedAt       DateTime          @default(now())
  completedAt     DateTime?
  categoryId      String?
  questions       QuestionAttempt[]
  category        Category?         @relation(fields: [categoryId], references: [id])
  quiz            Quiz              @relation(fields: [quizId], references: [id])
  user            User              @relation(fields: [userId], references: [userId])

  @@index([userId])
  @@index([quizId])
  @@index([categoryId])
}

model QuestionAttempt {
  id              String      @id @default(uuid())
  quizAttemptId   String
  questionId      String
  userAnswer      String
  isCorrect       Boolean
  timeSpentSecs   Int
  categoryId      String?
  difficultyLevel String
  awsService      String?
  question        Question    @relation(fields: [questionId], references: [id])
  quizAttempt     QuizAttempt @relation(fields: [quizAttemptId], references: [id], onDelete: Cascade)

  @@index([quizAttemptId])
  @@index([questionId])
  @@index([categoryId])
}

model QuestionOption {
  id         String   @id @default(uuid())
  questionId String
  content    String
  isCorrect  Boolean
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@index([questionId])
}

model AIAnalysisReport {
  id              String   @id @default(uuid())
  userId          String
  reportData      Json
  generatedAt     DateTime @default(now())
  expiresAt       DateTime
  lastRequestedAt DateTime @default(now())
  latest          Boolean  @default(true)
  user            User     @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@unique([userId, latest], name: "userId_latest")
  @@index([userId])
}

model ProcessedCronJobUser {
  jobId       String   @id
  userId      String
  processedAt DateTime @default(now())

  @@unique([jobId, userId])
  @@index([processedAt])
}

model Project {
  id                 String            @id @default(uuid())
  title              String
  description        String
  categoryId         String
  difficulty         DifficultyLevel   @default(BEGINER)
  estimatedTime      Int
  estimatedCost      Int               @default(0)
  thumbnailUrl       String?
  videoUrl           String?
  prerequisites      String[]
  learningObjectives String[]
  keyTechnologies    String[]
  isPremium          Boolean           @default(false)
  isPublished        Boolean           @default(false)
  projectType        ProjectType       @default(TUTORIAL)
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  category           Category          @relation(fields: [categoryId], references: [id])
  userProgresses     ProjectProgress[]
  steps              ProjectStep[]

  @@index([categoryId])
  @@index([difficulty])
  @@index([isPremium])
  @@index([isPublished])
}

model ProjectStep {
  id                 String                @id @default(uuid())
  projectId          String
  stepNumber         Int
  title              String
  description        String?
  instructions       String
  expectedOutput     String?
  validationCriteria String[]
  mediaUrls          String[]
  estimatedTime      Int
  stepType           ProjectStepType       @default(INSTRUCTION)
  isOptional         Boolean               @default(false)
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @updatedAt
  project            Project               @relation(fields: [projectId], references: [id], onDelete: Cascade)
  responses          ProjectStepResponse[]

  @@unique([projectId, stepNumber])
  @@index([projectId])
}

model ProjectProgress {
  id                     String                @id @default(uuid())
  userId                 String
  projectId              String
  currentStep            Int                   @default(1)
  completedSteps         Int[]
  startedAt              DateTime              @default(now())
  completedAt            DateTime?
  guidanceMode           GuidanceMode          @default(SOME_GUIDANCE)
  generatedDocumentation String?
  certificateUrl         String?
  status                 ProjectStatus         @default(IN_PROGRESS)
  timeSpent              Int                   @default(0)
  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @updatedAt
  achievements           ProjectAchievement[]
  project                Project               @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user                   User                  @relation(fields: [userId], references: [userId], onDelete: Cascade)
  stepResponses          ProjectStepResponse[]

  @@unique([userId, projectId])
  @@index([userId])
  @@index([projectId])
  @@index([status])
}

model ProjectStepResponse {
  id               String          @id @default(uuid())
  progressId       String
  stepId           String
  response         String
  completedAt      DateTime        @default(now())
  timeSpent        Int             @default(0)
  hintsUsed        Int             @default(0)
  validationPassed Boolean         @default(false)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  progress         ProjectProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  step             ProjectStep     @relation(fields: [stepId], references: [id], onDelete: Cascade)

  @@unique([progressId, stepId])
  @@index([progressId])
  @@index([stepId])
}

model ProjectAchievement {
  id          String          @id @default(uuid())
  progressId  String
  type        AchievementType
  title       String
  description String
  iconUrl     String?
  earnedAt    DateTime        @default(now())
  progress    ProjectProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)

  @@index([progressId])
  @@index([type])
}

enum SubscriptionTier {
  FREE
  PRO
  PREMIUM
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  EXPIRED
  PAST_DUE
  PENDING
}

enum DifficultyLevel {
  BEGINER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum VariantType {
  DAYS
  MONTHS
  YEARS
}

enum PlanType {
  PRO_MONTHLY
  PRO_YEARLY
  PREMIUM_MONTHLY
  PREMIUM_YEARLY
}

enum ProjectType {
  TUTORIAL
  CHALLENGE
  ASSESSMENT
  CAPSTONE
}

enum ProjectStepType {
  INSTRUCTION
  QUIZ
  VALIDATION
  REFLECTION
  CHECKPOINT
}

enum GuidanceMode {
  INDEPENDENT
  SOME_GUIDANCE
  STEP_BY_STEP
}

enum ProjectStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  ABANDONED
}

enum AchievementType {
  FIRST_PROJECT
  SPEED_COMPLETION
  PERFECT_SCORE
  DOCUMENTATION_MASTER
  STREAK
  CATEGORY_EXPERT
}
