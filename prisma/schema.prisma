generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model User {
  userId                 String             @id @default(uuid())
  email                  String             @unique
  firstName              String             @unique
  lastName               String
  createdAt              DateTime           @default(now())
  updatedAt              DateTime           @updatedAt
  hasCompletedOnboarding Boolean            @default(false)
  aiAnalysisReports      AIAnalysisReport[]
  quizAttempts           QuizAttempt[]
  onboarding             UserOnboarding?
  progress               UserProgress[]
  Subscriptions   LsUserSubscription[]
}

// New enums for subscription tiers and status
enum SubscriptionTier {
  FREE
  PRO
  PREMIUM
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  EXPIRED
  PAST_DUE
  PENDING
}

model UserOnboarding {
  id                      String    @id @default(uuid())
  userId                  String    @unique
  companyType             String?
  companySize             String?
  goals                   String[]
  preferredCertifications String[]
  experience              String?
  completedAt             DateTime?
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  user                    User      @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model Quiz {
  id           String           @id @default(uuid())
  title        String
  description  String?
  thumbnail    String?         // URL or path to the thumbnail image
  isPublic     Boolean         @default(false)
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  categoryId   String?
  duration     Int?
  free         Boolean?
  level        DifficultyLevel? @default(BEGINER)
  questions    Question[]
  category     Category?        @relation(fields: [categoryId], references: [id])
  attempts     QuizAttempt[]
  userProgress UserProgress[]
}

model Question {
  id              String            @id @default(uuid())
  quizId          String
  isMultiSelect   Boolean           @default(false)
  correctAnswer   String[]
  explanation     String?
  createdAt       DateTime          @default(now())
  categoryId      String?
  difficultyLevel String?
  awsService      String?
  content         String
  category        Category?         @relation(fields: [categoryId], references: [id])
  quiz            Quiz              @relation(fields: [quizId], references: [id], onDelete: Cascade)
  attempts        QuestionAttempt[]
  options         QuestionOption[]
}

model Flashcard {
  id         String    @id @default(uuid())
  topic      String
  question   String
  answer     String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])
}

model UserProgress {
  id          String    @id @default(uuid())
  userId      String
  quizId      String
  score       Int
  completedAt DateTime?
  timeTaken   Int?
  attempts    Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  quiz        Quiz      @relation(fields: [quizId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model LsSubscriptionPlan {
  id                 String               @id @default(cuid())
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  productId          Int
  productName        String
  variantId          Int                  @unique
  name               String
  description        String?
  price              String
  isUsageBased       Boolean              @default(false)
  interval           String?
  intervalCount      Int?
  trialInterval      String?
  trialIntervalCount Int?
  sort               Int?
  Subscriptions      LsUserSubscription[]
}

model LsWebhookEvent {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now())
  eventName       String
  processed       Boolean  @default(false)
  body            Json
  processingError String?
}

// Lemon Squeezy Subscription 
model LsUserSubscription {
  id                 String             @id @default(cuid())
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  lemonSqueezyId     String             @unique
  orderId            Int
  name               String
  email              String
  status             String
  statusFormatted    String
  renewsAt           String?
  endsAt             String?
  trialEndsAt        String?
  price              String
  isUsageBased       Boolean            @default(false)
  isPaused           Boolean            @default(false)
  subscriptionItemId String?
  userId             String
  User               User               @relation(fields: [userId], references: [userId])
  planId             String
  SubscriptionPlan   LsSubscriptionPlan @relation(fields: [planId], references: [id])
}




model Category {
  id          String        @id @default(uuid())
  name        String        @unique
  description String?
  flashcards  Flashcard[]
  questions   Question[]
  quizzes     Quiz[]
  quizAttempt QuizAttempt[]
}

model QuizAttempt {
  id              String            @id @default(uuid())
  userId          String
  quizId          String
  totalScore      Int
  percentageScore Float
  timeSpentSecs   Int
  startedAt       DateTime          @default(now())
  completedAt     DateTime?
  categoryId      String?
  questions       QuestionAttempt[]
  category        Category?         @relation(fields: [categoryId], references: [id])
  quiz            Quiz              @relation(fields: [quizId], references: [id])
  user            User              @relation(fields: [userId], references: [userId])

  @@index([userId])
  @@index([quizId])
  @@index([categoryId])
}

model QuestionAttempt {
  id              String      @id @default(uuid())
  quizAttemptId   String
  questionId      String
  userAnswer      String
  isCorrect       Boolean
  timeSpentSecs   Int
  categoryId      String?
  difficultyLevel String
  awsService      String?
  question        Question    @relation(fields: [questionId], references: [id])
  quizAttempt     QuizAttempt @relation(fields: [quizAttemptId], references: [id], onDelete: Cascade)

  @@index([quizAttemptId])
  @@index([questionId])
  @@index([categoryId])
}

model QuestionOption {
  id         String   @id @default(uuid())
  questionId String
  content    String
  isCorrect  Boolean
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@index([questionId])
}

model AIAnalysisReport {
  id              String   @id @default(uuid())
  userId          String
  reportData      Json
  generatedAt     DateTime @default(now())
  expiresAt       DateTime
  lastRequestedAt DateTime @default(now())
  latest          Boolean  @default(true)
  user            User     @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@index([userId])
  @@unique([userId, latest], name: "userId_latest")
}

enum DifficultyLevel {
  BEGINER
  INTERMEDIATE
  ADVANCED
  EXPERT
}
